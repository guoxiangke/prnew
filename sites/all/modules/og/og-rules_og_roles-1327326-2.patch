From d0cdf43d090f5a3529d84a05a8e69cf3a3154d98 Mon Sep 17 00:00:00 2001
From: othermachines <othermachines@1201100.no-reply.drupal.org>
Date: Sun, 17 Feb 2013 16:14:46 -0700
Subject: [PATCH] Issue #1327326 by mrfelton, ioskevich, et al: Added  Rules
 condition and actions related to OG group roles.

---
 og.rules.inc | 123 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 123 insertions(+)

diff --git a/og.rules.inc b/og.rules.inc
index ccfa6e3..e276241 100644
--- a/og.rules.inc
+++ b/og.rules.inc
@@ -199,10 +199,83 @@ function og_rules_action_info() {
     'access callback' => 'og_rules_integration_access',
   );
 
+  $items['og_grant_og_role'] = array(
+    'label' => 'Grant OG role',
+    'group' => 'Organic groups',
+    'parameter' => array(
+      'account' => array(
+        'type' => 'user',
+        'label' => t('User'),
+        'description' => t('The user who will be granted this role.'),
+        'wrapped' => TRUE,
+      ),
+      'group' => array(
+        'type' => array_keys(og_get_all_group_entity()),
+        'label' => t('Group'),
+        'wrapped' => TRUE,
+      ),
+      'roles' => array(
+        'type' => 'list<integer>',
+        'label' => t('Group roles'),
+        'options list' => 'og_rules_group_roles_options_list',
+        'restriction' => 'input',
+      ),
+    ),
+    'base' => 'og_rules_grant_og_role',
+    'access callback' => 'og_rules_integration_access',
+  );
+  
+  $items['og_revoke_og_role'] = array(
+    'label' => 'Revoke OG role',
+    'group' => 'Organic groups',
+    'parameter' => array(
+      'account' => array(
+        'type' => 'user',
+        'label' => t('User'),
+        'description' => t('The user who will have the role revoked.'),
+        'wrapped' => TRUE,
+      ),
+      'group' => array(
+        'type' => array_keys(og_get_all_group_entity()),
+        'label' => t('Group'),
+        'wrapped' => TRUE,
+      ),
+      'roles' => array(
+        'type' => 'list<integer>',
+        'label' => t('Group roles'),
+        'options list' => 'og_rules_group_roles_options_list',
+        'restriction' => 'input',
+      ),
+    ),
+    'base' => 'og_rules_revoke_og_role',
+    'access callback' => 'og_rules_integration_access',
+  );
+
   return $items;
 }
 
 /**
+ * Options list callback for group roles.
+ */
+function og_rules_group_roles_options_list($element) {
+  
+  $og_roles = array(); 
+  
+  foreach (og_get_all_group_bundle() as $group_type => $bundles) {
+    foreach ($bundles as $bundle => $label) {
+      $bundle_roles = og_roles($group_type, $bundle);
+      foreach ($bundle_roles as $rid => $name) {
+        // Don't return anonymous and authenticated member roles.
+        if (!in_array($name, array(OG_ANONYMOUS_ROLE, OG_AUTHENTICATED_ROLE))) {
+          $og_roles[$rid] = $label . ': ' . $name;
+        }
+      }
+    }
+  }
+  return $og_roles;
+}
+
+/**
  * Action: Get group members from a group content.
  */
 function og_rules_get_members($group_content) {
@@ -293,6 +366,24 @@ function og_rules_remove_entity_from_group(EntityDrupalWrapper $entity, EntityDr
 }
 
 /**
+ * Action: Grant OG role.
+ */
+function og_rules_grant_og_role(EntityDrupalWrapper $account, EntityDrupalWrapper $group, $roles) {
+  foreach ($roles as $rid) {
+    og_role_grant($group->type(), $group->getIdentifier(), $account->getIdentifier(), $rid);
+  }
+}
+
+/**
+ * Action: Revoke OG role.
+ */
+function og_rules_revoke_og_role(EntityDrupalWrapper $account, EntityDrupalWrapper $group, $roles) {
+  foreach ($roles as $rid) {
+    og_role_revoke($group->type(), $group->getIdentifier(), $account->getIdentifier(), $rid);
+  }
+}
+
+/**
  * OG Rules integration access callback.
  */
 function og_rules_integration_access($type, $name) {
@@ -404,6 +495,30 @@ function og_rules_condition_info() {
     'base' => 'og_rules_entity_is_group_content',
     'access callback' => 'og_rules_integration_access',
   );
+  $items['og_user_has_role'] = array(
+    'label' => t('User has group role'),
+    'group' => t('Organic groups'),
+    'parameter' => array(
+      'account' => array(
+        'type' => 'user',
+        'label' => t('User'),
+        'wrapped' => TRUE,
+      ),
+      'group' => array(
+        'type' => array_keys(og_get_all_group_entity()),
+        'label' => t('Group'),
+        'wrapped' => TRUE,
+      ),
+      'roles' => array(
+        'type' => 'list<integer>',
+        'label' => t('Group roles'),
+        'options list' => 'og_rules_group_roles_options_list',
+        'restriction' => 'input',
+      ),
+    ),
+    'base' => 'og_rules_condition_user_has_role',
+    'access callback' => 'og_rules_integration_access',
+  );
   return $items;
 }
 
@@ -477,5 +592,13 @@ function og_rules_entity_is_group_content_help() {
 }
 
 /**
+ * Condition: User has group role.
+ */
+function og_rules_condition_user_has_role(EntityDrupalWrapper $account, EntityDrupalWrapper $group, $roles) {
+  $user_roles = og_get_user_roles($group->type(), $group->getIdentifier(), $account->getIdentifier());
+  return !array_diff_key($roles, $user_roles);
+}
+
+/**
  * @}
  */
-- 
1.8.0.msysgit.0

