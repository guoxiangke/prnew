<?php
/**
 * Implements hook_menu().
 */
function druedu_user_tree_menu() {
 $items = array();
  $items['admin/config/camplus/advanced_management/department/bi'] = array(
    'title' => 'Advanced Management',
    'page callback' => 'druedu_public_group_add_page',
    'access arguments' => array('administer users'),
    'weight' => 7,
    'type' => MENU_LOCAL_TASK,
  );


  $items['admin/config/camplus/advanced_management/export'] = array(
    'title' => 'export school group data',
    'page callback' => 'druedu_user_group_template_generate',
    'page arguments' => array('school_department'),
    'access arguments' => array('administer users'),
    'weight' => 7,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function druedu_user_tree_theme() {
  return array(
    'druedu_user_admin_groups' => array(
      'render element' => 'form',
    ),
  );
}
function druedu_user_import_form($form, $form_state) {
  $args = func_get_args();
  $form['import'] = array(
    '#type' => 'fieldset',
    '#title' => t('import data'),

    '#description' =>'仅支持导入当前学年度的BIs',
  );
  $form['import']['type']= array(
    '#type' => 'value',
    '#value' => $args[2], // school_department
  );
  $form['import']['download'] = array(
    '#markup' =>l('Generate template','admin/people/advanced_management/export'),
  );
  $form['import']['file_upload'] = array(
    '#type' => 'file',
    '#title' => t('Choose excel'),
    '#size' => 48,
    '#theme_wrappers' => array(),
    '#weight' => -10,
  );
  $form['import']['button']= array(
    '#type' => 'submit',
    '#value' => t('Upload'),
    '#weight' => -9,
  );
  $form['#validate'] = array('_druedu_user_excel_validate');
  //$form['#submit'] = array('druedu_school_group_import_submit');
  //drupal_add_css(drupal_get_path('module', 'druedu_user_tree').'/druedu_user_tree.css','file');
  return $form;
}
/**
 * Validates an image uploaded by a user.
 *
 * @see user_account_form()
 */
function _druedu_user_excel_validate(&$form, &$form_state) {
  // If required, validate the uploaded picture.
  $validators = array(
    //'file_validate_is_image' => array(), // Validates file is really an image. 
     'file_validate_extensions' => array('xls','xlsx'), // Validate extensions.
    // 'file_validate_image_resolution' => array(variable_get('user_picture_dimensions', '85x85')),
    //'file_validate_size' => array(variable_get('user_picture_file_size', '30') * 1024),
  );
  // Save the file as a temporary file.
  $file = file_save_upload('file_upload', $validators);
  if ($file === FALSE) {
    form_set_error('file_upload', t("Failed to upload the picture image; the %directory directory doesn't exist or is not writable.", array('%directory' => variable_get('user_picture_path', 'pictures'))));
  }
  elseif ($file !== NULL) {
    $form_state['values']['file_upload'] = $file;
  }

}
function druedu_user_import_form_submit($form, &$form_state) {
  $file = $form_state['values']['file_upload'];
  
  require_once drupal_get_path('module', 'phpexcel').'/phpexcel.inc';

  $sheets = phpexcel_import($file->uri);
  //dpm($sheets ,'$sheets ');
  $group_type = $form['import']['type']['#value'];

  $file_name = 'department-BI.xls';

  $ori_file = $uri = 'public://'.$file_name;

  $sheets_ori =  phpexcel_import($ori_file);
    //dpm($sheets_ori ,'$sheets_ori ');

  if($sheets == $sheets_ori) {
     drupal_set_message(t('No new data imported.'), 'status');
     return;
  };

  { //public group can be parents of subject.
    $all_group_nodes = druedu_user_get_nodes_by_group('school_department');
    $parents[] = -1;//default one be group.
    foreach ($all_group_nodes as $g_nid => $g_node) {
      # code...
      $parents[] = $g_nid;
    }
  }

  global $user;
  $new_subjects = array();
  $user_add_new_subject_ids = array();
  foreach ($sheets as $key => $sheet) {
    $added = array_diff_assoc($sheets[$key],$sheets_ori[$key]);
    if(!count($added)){
      drupal_set_message(t('No new data imported.<br/>Please check the following:<br/>1.You have used the generated template (if the problem is still here, clear the browser\'s cahce and download it again),<br/>2.Locked items are not changed in the import file<br/>3. The ID of the new items should be greater than the greatest existing ID.'), 'status');
      return;
    }
    //dpm($added,'added');
    $count_group = 0;
    $count_subject = 0;
    $count_class = 0;
    $errors_count = 0;
    $flag = FALSE;
    foreach ($added as $key => $row) {
      # code...

      if(!isset($row['ID']) ||!isset($row['Name']) ||!isset($row['Type']) ||!isset($row['parents'])) {
        drupal_set_message(t('The Excel file\'s format is incorrect. Please check or download a new template, and import again.'), 'error');
        return;
      }
      //skip blank row.
      if(empty($row['ID']) && empty($row['Name']) && empty($row['Type']) && empty($row['parents'])) {
        //$errors_count++;
        continue;
      }
      if(empty($row['ID']) || empty($row['Name']) || empty($row['Type']) || empty($row['parents'])) {
        drupal_set_message(t('Row'.($key+2).': each row must contain a line of data. Please check the imported file. Note: 0 is considered empty.'), 'error');
        $errors_count++;
        continue;
      }
      $ID = (int) $row['ID'];
      $type = trim($row['Type']);
      $parent = (int) trim($row['parents']);

      if($group_type == 'school_department') {
        if($type=='budget item' && $parent == -1){
          drupal_set_message(t('Row'.($key+2).': the group must have a parent - please check your file and try again.'), 'error');
          $errors_count++;
          continue;
        }

      }
     
      {//for public group $group_type == 'public_group'

        if(in_array($parent,$parents)) {
          $gid = (int) $parent;
        }elseif(in_array($parent,$user_add_new_group_ids)) {
          //add a subject give a new ID in excle,then add sub-classes,give theme parents ID of this subject new ID.
          $gid = $new_groups[$parent];
        }else {
          drupal_set_message(t('Row'.($key+2).': parent ID error: parent not found.'), 'error');
          $errors_count++;
          continue;
        }

        if(!in_array($type,array('school_department','budget_item'))) {
          drupal_set_message(t('Row'.($key+2).':row types must be school department or budget item.'), 'error');
          $errors_count++;
          continue;
        }
      }

      $title = trim($row['Name']);
   


      // create a blank node
       $node = (object) array('uid' => $user->uid, 'title'=>$title, 'name' => (isset($user->name) ? $user->name : ''), 'type' => $type, 'language' => LANGUAGE_NONE);
       node_object_prepare($node);
       //'school department','budget item'  === 'group','subjects'
       if($type == 'school_department') {
          //$messages .=l($title,'node/'.$node->nid).' ';
          //drupal_set_message(t('A new '.$type.' '.l($title,'node/'.$node->nid).' has been successfully added'), 'status');
          node_save($node);
          $count_group++;
          $new_groups[$ID] = $node->nid;
          $user_add_new_group_ids[] = $ID;
          $flag = TRUE;
       }elseif($type == 'budget_item') {
          $node->field_parents_department[LANGUAGE_NONE][0] = array('target_id' => $gid);
          node_save($node);
          //$messages .=l($title,'node/'.$node->nid).' ';
          //drupal_set_message(t('A new '.$type.' '.l($title,'node/'.$node->nid).' has been successfully added'), 'status');
          $new_subjects[$ID] = $node->nid;
          $user_add_new_subject_ids[] = $ID;
          $count_subject++;
          $flag = TRUE;
       }
      //remove old files.
      //drupal_unlink($ori_file);
       // $flag = TRUE;
    }
  }
    if($flag){

      $destination = variable_get('file_' . file_default_scheme() . '_path', conf_path() . '/files');
      $uri = 'public://'.$file_name;//'.$destination.'/
      //file_move($file, $uri, FILE_EXISTS_RENAME);
      $file = file_move($file, $uri, $replace = FILE_EXISTS_RENAME);//record user op history 
      file_copy($file, $uri, $replace = FILE_EXISTS_REPLACE);
      drupal_set_message(t('Total: '. $count_group.' school department(s) and '. $count_subject.' budget item(s) imported.'), 'status');
      if($errors_count)
      drupal_set_message(t('Total errors: '.$errors_count.'. Please re-generate the template, add the missing items and import again.'), 'error');
    }else{
      drupal_set_message(t('Total: '. $count_group.' group(s) and '. $count_subject.' subject(s) imported.'), 'status');
    }
  
}

function druedu_public_group_add_page() {
  $build['import'] = drupal_get_form('druedu_user_import_form', 'school_department');
  $build['show'] = drupal_get_form('druedu_user_admin_groups', 'school_department');
  drupal_set_title('Advanced management » School Department & BI');
  return $build;
}
/**
 * Export data to xls.
 */
function druedu_user_group_template_generate($type) {
  // Prepare the data
  /*
  $data = array(
    array('1', 'Sa', 'subject', '', 'Grade 1'),
    array('12', 'Sa-Ca', 'class', '1', 'Grade 1'),
    array('10', 'Sa-Cb', 'class', '1', 'Grade 1'),
  );*/
  $destination = variable_get('file_' . file_default_scheme() . '_path', conf_path() . '/files');
  if($type == 'school_department') {
    $headers = array('ID', 'Name', 'Type', 'parents', 'Department');
    $public_groups = druedu_user_get_nodes_by_group('school_department');
    foreach ($public_groups as $g_nid => $g_node) {
      # code...
          $data[$g_nid] = array($g_nid,(string)$g_node->title,'school_department',-1,$g_node->title);
          // $all_subjects_node = druedu_user_get_nodes_by_group($g_nid);
          $all_subjects_node = druedu_user_get_nodes_by_group($g_nid, $subject = null, $class = null, $grade_group_content = 'budget_item');
          foreach ($all_subjects_node as $s_nid => $s_node) {
            $data[$s_nid] = array($s_nid,(string)$s_node->title,'budget_item',$g_nid,$g_node->title);
          }

    }
    if (file_exists($destination.'/department-BI.xls')) {
       drupal_unlink($destination.'/department-BI.xls');
    }
    $path = file_create_filename('department-BI.xls', $destination);

  }

  require_once drupal_get_path('module', 'phpexcel').'/phpexcel.inc';
  if(druedu_phpexcel_export($headers, $data, $path)){//@see phpexcel_export
    drupal_set_message(t('The template has been successfully generated. Click '.l('here',$path)).' to download.', 'status');
  }
  drupal_goto('admin/people/advanced_management/department/bi');
}

function druedu_user_admin_groups($form, $form_state) {

  $type = 'public_group';
  $public_groups = druedu_user_get_nodes_by_group('school_department');

  foreach ($public_groups as $g_nid => $g_node) {
    # code...
    $groups[$g_nid]['gid'] = $g_nid;
    $groups[$g_nid]['depth'] = 0;
    $groups[$g_nid]['parent'] = 0;
    $groups[$g_nid]['type'] = 'school_department';
    $groups[$g_nid]['name'] = $g_node->title; 
    //($grade, $subject = null, $class = null, $grade_group_content = 'subject', $subject_group_content = 'class')
    // $all_subjects_node = druedu_user_get_nodes_by_group($g_nid, $subject = null, $class = null, $grade_group_content = 'budget_item');
    $all_subjects_node = camplus_pr_get_bis_by_year($g_nid, $financial_year = NULL);
    foreach ($all_subjects_node as $s_nid => $s_node) {
      $groups[$s_nid]['gid'] = $s_nid;
      $groups[$s_nid]['depth'] = 1;
      $groups[$s_nid]['parent'] = $g_nid;
      $groups[$g_nid]['type'] = 'budget_item';
      $groups[$s_nid]['name'] = $s_node->title;
    }

  }

  $form['#tree'] = TRUE;
  $form['groups'] = array(
    '#tree' => TRUE,
  );

  if(isset($form_state['input']['name'])){
    $gid = -1;
    $form['groups'][$gid]['gid'] = array(
        '#type' => 'hidden',
        '#value' => $gid,
      );
      $form['groups'][$gid]['parent'] = array(
        '#type' => 'hidden',
        '#default_value' => $type == 'public_groups'?0:$gid,//$type = 'public_groups';
      );
      $form['groups'][$gid]['depth'] = array(
        '#type' => 'hidden',
        // Same as above, the depth is modified by javascript, so it's a default_value.
        //-1 is default of added school group ,should be grade,so this num is to determin...
        //0 is the public group depth and default level.
        '#default_value' => -1,//$type == 'public_groups'?0:-1,//$type = 'public_groups';-2,//0 1 2,not the grade
      );
       $form['groups'][$gid]['title'] = array(
        '#type' => 'hidden',
        // Same as above, the depth is modified by javascript, so it's a default_value.
        '#default_value' =>   $form_state['input']['name'],
      );

    $form['groups'][$gid]['#group'] = array('name'=>$form_state['input']['name']);
    $form['groups'][$gid]['#weight'] = 0;//$order
    $form['groups'][$gid]['weight'] = array(
      '#type' => 'textfield',
      '#title' => t('Weight for @title', array('@title' => $form_state['input']['name'])),
      '#title_display' => 'invisible',
      '#size' => 4,
      '#default_value' => 0,//$order
      '#attributes' => array('class' => array('role-weight')),
    );
  }else {
    $school_group_info = ($type=='school_group')?'The title of the new item (subject or class). After adding it, drag the item under a parent in the hierachy: the first level will make it a subject, the second level a class.':'The title of the new item (Department or BI). After adding it, drag the item under a parent in the hierachy: the first level will make it a Department, the second level a BI.';
    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      //'#title_display' => 'invisible',
      '#size' => 32,
      '#maxlength' => 64,
      '#description' =>$school_group_info,
    );
    $form['add'] = array(
      '#type' => 'submit',
      '#value' => t('Add'),
      '#ajax' => array(
        'callback' => '_ajax_add_group_callback',
        'wrapper' => 'druedu-user-admin-groups',//rename attention.
        'effect' => 'slide',
        //'progress' => array('type' => 'none'),
      ),

    );
  }

  $order = 1;
  if(isset($groups['-1']))unset($groups['-1']);
  foreach ($groups as $gid => $group) {
      $form['groups'][$gid]['gid'] = array(
        '#type' => 'hidden',
        '#value' => $groups[$gid]['gid'],
      );
      $form['groups'][$gid]['parent'] = array(
        '#type' => 'hidden',
        // Yes, default_value on a hidden. It needs to be changeable by the javascript.
        '#default_value' => $groups[$gid]['parent'],
      );
      $form['groups'][$gid]['depth'] = array(
        '#type' => 'hidden',
        // Same as above, the depth is modified by javascript, so it's a default_value.
        '#default_value' =>  $groups[$gid]['depth'],
      );
      $form['groups'][$gid]['title'] = array(
        '#type' => 'hidden',
        // Same as above, the depth is modified by javascript, so it's a default_value.
        '#default_value' =>   $groups[$gid]['name'],
      );

    $form['groups'][$gid]['#group'] = $groups[$gid];
    $form['groups'][$gid]['#weight'] = $order;
    $form['groups'][$gid]['weight'] = array(
      '#type' => 'textfield',
      '#title' => t('Weight for @title', array('@title' => $group['name'])),
      '#title_display' => 'invisible',
      '#size' => 4,
      '#default_value' => $order,
      '#attributes' => array('class' => array('role-weight')),
    );
    $order++;

  }

  $form['type'] = array(
    '#type' => 'hidden',
    // Same as above, the depth is modified by javascript, so it's a default_value.
    '#value' =>   $type,
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Confirm setting')
  );
  return $form;
}

function _ajax_add_group_callback($form, &$form_state) {
  // if change grade,class default be no result.
  $form_state['rebuild'] = TRUE;
  $form = drupal_build_form($form['#form_id'],$form_state);
  return $form;
}

function druedu_user_admin_groups_validate($form, $form_state) {

  if(isset($form_state['values']['groups']['-1'])) {
    global $user;
    $new_group = $form_state['values']['groups']['-1'];
    //depth: -1 grade ,0 group,1 subject,>2 class
    if($form_state['values']['type'] == 'school_group') {
      if($new_group['depth'] == -1 || $new_group['depth'] == 0) {
        form_set_error('', t('You cannot add a grade, The draggable item\'s level is incorrect - please make sure to follow the onscreen instructions before confirmation.'));
      }elseif($new_group['depth'] > 2) {
        form_set_error('', t('The draggable item\'s level is incorrect - please make sure to follow the onscreen instructions before confirmation.'));
      }
      // add class,but user drag it's parent to grade level.
      if($new_group['depth'] == 1) { //subject
        $parent_nid = $new_group['parent'];
        $parent_node = node_load($parent_nid);
        if($parent_node->type != 'grade'){
          form_set_error('', t('Please do not drag locked items,or your will error.'));
        }
      }
      if($new_group['depth'] == 2) { //class
        $parent_nid = $new_group['parent'];
        $parent_node = node_load($parent_nid);
        if($parent_node->type != 'subject'){
          form_set_error('', t('Please do not drag locked items,or your will error.'));
        }
      }
    }
  if($form_state['values']['type'] == 'public_group') {
    if($new_group['depth'] > 1) {
      form_set_error('', t('The draggable item\'s level is incorrect - please make sure to follow the onscreen instructions before confirmation.')); 
    }
  }


  }
  //return;
}
/**
 * Submit handler for roles overview form.
 */
function druedu_user_admin_groups_submit($form, &$form_state) {
  //index -1 is the new one.
  if(isset($form_state['values']['groups']['-1'])) {
    global $user;
    $new_group = $form_state['values']['groups']['-1'];
    //depth: -1 grade ,0 group,1 subject,>2 class
    if($form_state['values']['type']=='public_group') {
      switch ($new_group['depth']) {

      case '-1':
      case '0' :
        $type = 'school_department';//group
        // create a group node
        $node = (object) array('uid' => $user->uid, 'title'=>$new_group['title'], 'name' => (isset($user->name) ? $user->name : ''), 'type' => $type, 'language' => LANGUAGE_NONE);
        node_save($node);
        drupal_set_message(t('A new school department '.l($new_group['title'],'node/'.$node->nid).' has been successfully added'), 'status');
        break;

      case '1':
         // create a group's  subject  node
        $type = 'budget_item';
        $gid =  $new_group['parent'];
        // create a blank node
        $node = (object) array('uid' => $user->uid, 'title'=>$new_group['title'], 'name' => (isset($user->name) ? $user->name : ''), 'type' => $type, 'language' => LANGUAGE_NONE);
        node_object_prepare($node);
        //$ref_field = 'og_node';

        $node->field_parents_department[LANGUAGE_NONE][0] = array('target_id' => $gid);
        $financial_year =  date('Y-m-d H:i:s',strtotime(date('Y').'-01-01 00:00:00'));
        $node->field_financial_year[LANGUAGE_NONE][0] = array('value' => $financial_year,'date_type' => 'datetime');
        // $node->og_node[LANGUAGE_NONE][0] = array('target_id' => $gid);
        node_save($node);
        drupal_set_message(t('A new budget item '.l($new_group['title'],'node/'.$node->nid).' has been successfully added'), 'status');
        
        break;

    }

    }
  }
  //
}

/**
 * Returns HTML for the role order and new role form.
 *
 * @param $variables
 *   An associative array containing:
 *   - form: A render element representing the form.
 *
 * @ingroup themeable
 */
function theme_druedu_user_admin_groups($variables) {
  $form = $variables['form'];
  $header = array(t('Name'), t('Weight'), array('data' => t('Operations'), 'colspan' => 2));

  $rows[] = array(array('data' => drupal_render($form['name']) . drupal_render($form['add']), 'colspan' => 4, 'class' => 'edit-name'));

  foreach (element_children($form['groups']) as $key=>$gid) {

    $group = &$form['groups'][$gid];
    $name = $group['#group']['name'];
    $row = array();
    {//in_array($gid, array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID))
      $locked = '<em>(locked)</em>';

      if($gid == '-1') {
        if($form['type']['#value']=='school_group') {
          $locked = '<em>(dragable)</em><span class="warning"> Drag this item under an appropriate parent (level 1 to add it as a subject, level 2 to add it as a class). Other levels will be ignored.</a>';
        }else {
          $locked = '<em>(dragable)</em><span class="warning">new* Please confirm to save this settings.Drag this item under an appropriate parent (level 1...</span>';
        }
      }

      $row[] = (isset($group['#group']['depth']) && $group['#group']['depth'] > 0 ? theme('indentation', array('size' => $group['#group']['depth'])) : ''). t('@name '.$locked, array('@name' => $name));

      $group['gid']['#attributes']['class'] = array('group-id');
      $group['parent']['#attributes']['class'] = array('group-parent');
      $group['depth']['#attributes']['class'] = array('group-depth');

      $row[0] .= drupal_render($group['parent']) . drupal_render($group['gid']) . drupal_render($group['depth']);
      //$group['weight']['#attributes']['class'] = array('term-weight');
      $form['groups'][$gid]['weight']['#attributes']['class'] = array('group-weight');
      $row[] = drupal_render($form['groups'][$gid]['weight']);
      $row[] = '';
      
    }
    $type = $form['type']['#value'];
    $path = "admin/advanced_membership_management/add/".$type;//current_path(); //dpm($path);
    if($gid=='-1'){// &&
      //$row[] = '<input type="button" id="edit-remove" name="op" value="Remove" class="form-submit remove-item">';
      $row[] = l(t('remove'), $path,array('attributes'=>array('class'=>array('remove-item'))));
      $class = array('new-row draggable');
      //if( $form['type']['#value']=='school_group'){$class[] = 'draggable';}
      $rows[$gid] = array('data' => $row, 'class' => $class);
    }else {
      $row[] = l(t('edit'), 'node/' . $gid.'/edit');
      $rows[$gid] = array('data' => $row, 'class' => array('draggable','locked'));
    }
  }
    
  // Add drag and drop if parent fields are present in the form.
  //if($form['type']['#value']=='school_group') {// && $form['name']['#value'] 
    drupal_add_tabledrag('groups_tree', 'match', 'parent', 'group-parent', 'group-parent', 'group-id', FALSE);
    drupal_add_tabledrag('groups_tree', 'depth', 'group', 'group-depth', NULL, NULL, FALSE);
    drupal_add_tabledrag('groups_tree', 'order', 'sibling', 'group-weight');
    drupal_add_js(drupal_get_path('module', 'druedu_user_tree') . '/druedu_user_tree.js');
  //}
  
 

  $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'groups_tree')));
  $output = drupal_render_children($form).$output;

  return $output;
}


/**
 * Simple API function which will generate an XLS file and
 * save it in $path.
 *
 * @param array $headers
 *            An array containing all headers. If given a two-dimensional array,
 *            each first dimension entry will be on a separate worksheet
 *            ($headers[sheet][header]).
 * @param array $data
 *            A two-dimensional array containing all data ($data[row][column]).
 *            If given a three-dimensional array, each first dimension
 *            entry will be on a separate worksheet ($data[sheet][row][column]).
 * @param string $path
 *            The path where the file must be saved. Must be writable.
 * @param array $options
 *            An array which allows to set some specific options.
 *            Used keys:
 *                [format] = The EXCEL format. Can be either 'xls' or 'xlsx'
 *                [creator] = The name of the creator
 *                [title] = The title
 *                [subject] = The subject
 *                [description] = The description
 *            The options array will always be passed to all the hooks. If
 *            developers need specific information for their own hooks, they
 *            can add any data to this array.
 * @return bool
 *            TRUE on success, FALSE on error. Look in watchdog logs for information
 *            about errors.
 */
function druedu_phpexcel_export($headers = array(), $data = array(), $path = '', $options = NULL) {
  if (!count($headers) && (!isset($options['ignore_headers']) || (isset($options['ignore_headers']) && !$options['ignore_headers']))) {
    watchdog('phpexcel', "You must provide at lease one header entry!", array(), WATCHDOG_ERROR);
    
    return FALSE;
  }
  
  if (!count($data)) {
    watchdog('phpexcel', "No data provided!", array(), WATCHDOG_ERROR);
    
    return FALSE;
  }
  
  if (!(is_writable($path) || (!file_exists($path) && is_writable(dirname($path))))) {
    watchdog('phpexcel', "Path '@path' is not writable!", array('@path' => $path), WATCHDOG_ERROR);
    
    return FALSE;
  }
  
  if (!file_exists('sites/all/libraries/PHPExcel/PHPExcel.php')) {
    watchdog('phpexcel', "Couldn't find the PHPExcel library! ", array(), WATCHDOG_ERROR);
    
    return FALSE; 
  }
  
  require_once 'sites/all/libraries/PHPExcel/PHPExcel.php';
  
  $path = phpexcel_munge_filename($path);
  
  // Can we use Memcache ?
  $memcache = variable_get('phpexcel_memcache', '');
  
  if (empty($memcache) || !$cache_method = PHPExcel_CachedObjectStorageFactory::cache_to_memcache) {
    $cache_method = PHPExcel_CachedObjectStorageFactory::cache_in_memory_gzip;
    
    $cache_settings = array();
  }
  else {
    $cache_settings = array('memcacheServer'  => $memcache);
  }
  
  //PHPExcel_Settings::setCacheStorageMethod($cache_method, $cache_settings);
  
  // Must we render from a template file ?
  if (!empty($options['template'])) {
    $xls_reader = PHPExcel_IOFactory::createReaderForFile($options['template']);
    
    $xls = $xls_reader->load($options['template']);
  }
  else {
    $xls = new PHPExcel();
  }
  $temp = $xls->getProperties();
  _phpexcel_set_properties($temp, $options);
  
  // Must we ignore the headers ?
  if (empty($options['ignore_headers'])) {
    _phpexcel_set_headers($xls, $headers, $options);
  }
  //debug guo strict warning: Only variables should be passed by reference in druedu_phpexcel_export() (line 865 of
  $temp = array_values($headers);
  $temp = reset($temp);
  $counts = count($temp);
  _phpexcel_set_columns($xls, $data, $counts, $options);
  
  if (!isset($options['format']) || $options['format'] == 'xls') {
    $writer = new PHPExcel_Writer_Excel5($xls);
  }
  else {
    $writer = new PHPExcel_Writer_Excel2007($xls);
  }
  
  $writer->save($path);
  
  return file_exists($path);
}

/**
 * Get all nodes of the specific group.
 * $grade : node type or grade nid.
 * $grade (string) : get_all_nodes_by_group_name()
 * $grade (int) :  ( int int int ) get all nodes of the deeper one group content.
 *
 * get_nodes_by_group_type($group_type)
 * @ $grade == $group_type
 */
function druedu_user_get_nodes_by_group($grade, $subject = null, $class = null, $grade_group_content = 'subject', $subject_group_content = 'class') {
  if(is_numeric($grade)) {
    $node_type = $grade_group_content;
    $gid = $grade;
    $field_name = 'og_node';
    if(is_numeric($subject)) {
      $node_type = $subject_group_content;
      $gid = $subject;
      $field_name = 'field_subjects_groups_audience';
    }
    if(is_numeric($class)) {
      $node_type = 'node';
      $gid = $class;
      $field_name = 'og_node2';
    }
    $query = db_select('og_membership', 'og');
    $query->join('node','n','n.nid = og.etid');
    $nids = $query
      ->fields('og', array('etid'))//nid
      ->condition('og.gid ',$gid)
      ->condition('n.type ',$node_type)
      ->condition('og.entity_type','node')
      ->condition('og.group_type','node')
      //->condition('field_name',$field_name)
      
      ->condition('og.state',1)
      ->orderBy('og.created ', 'ASC')
      ->execute()
      ->fetchCol();
    $nodes = node_load_multiple($nids);
  
    return $nodes ? $nodes : array();
  }elseif(is_string($grade)) { 
    $node_type = $grade;
    $query = db_select('node', 'n');
  
    $nids = $query
      ->fields('n', array('nid'))
      ->condition('n.type',$node_type)
      ->orderBy('n.changed', 'ASC')
      ->execute()
      ->fetchCol();
    $nodes = node_load_multiple($nids);
    return $nodes ? $nodes : array();
  }
}

?>